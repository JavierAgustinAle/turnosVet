{"version":3,"sources":["Components/Header.jsx","Components/AddNew.jsx","Components/BtnDelete.jsx","Components/Appointment.jsx","Components/List.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Header","props","className","title","AddNew","state","petRef","React","createRef","ownerRef","dateRef","timeRef","symptomsRef","crearNuevaCita","e","preventDefault","pet","current","value","owner","date","time","symptoms","nuevaCita","id","uuid","crearCita","currentTarget","reset","onSubmit","this","type","ref","placeholder","required","Component","BtnDelete","onClick","borrarCita","Appointment","data","proptType","PropTypes","shape","string","isRequired","func","List","citas","message","Object","keys","length","map","cita","key","App","setState","filter","citasLS","localStorage","getItem","JSON","parse","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.b08359d7.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = props => {\r\n    return (\r\n        <header>\r\n            <h1 className=\"text-center\">\r\n                {props.title}\r\n            </h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nHeader.propTypes = {\r\n    title: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport uuid from 'uuid'; // Genera el ID aleatorio\r\nimport PropTypes from 'prop-types';\r\n\r\nclass AddNew extends Component {\r\n    state = {}\r\n\r\n    petRef = React.createRef();\r\n    ownerRef = React.createRef();\r\n    dateRef = React.createRef();\r\n    timeRef = React.createRef();\r\n    symptomsRef = React.createRef();\r\n\r\n\r\n    crearNuevaCita = e => {\r\n        e.preventDefault();\r\n\r\n        const pet = this.petRef.current.value,\r\n            owner = this.ownerRef.current.value,\r\n            date = this.dateRef.current.value,\r\n            time = this.timeRef.current.value,\r\n            symptoms = this.symptomsRef.current.value;\r\n\r\n\r\n        const nuevaCita = {\r\n            id: uuid(),\r\n            pet: pet,\r\n            owner: owner,\r\n            date: date,\r\n            time: time,\r\n            symptoms: symptoms\r\n        }\r\n\r\n        this.props.crearCita(nuevaCita);\r\n\r\n        e.currentTarget.reset();\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card mt-5\">\r\n                <div className=\"card-body\">\r\n                    <h2 className=\"card-title text-center mb-5\">\r\n                        Add Appointments Here!\r\n                    </h2>\r\n                    <form onSubmit={this.crearNuevaCita}>\r\n                        <div className=\"form-group row\">\r\n                            <label className=\"col-sm-4 col-lg-2 col-form-label\">Pet's Name*</label>\r\n                            <div className=\"col-sm-8 col-lg-10\">\r\n                                <input type=\"text\" className=\"form-control\" ref={this.petRef} placeholder=\"Pet's Name\" required />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group row\">\r\n                            <label className=\"col-sm-4 col-lg-2 col-form-label\">Owner's Name*</label>\r\n                            <div className=\"col-sm-8 col-lg-10\">\r\n                                <input type=\"text\" ref={this.ownerRef} className=\"form-control\" placeholder=\"Owner's Name\" required />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"form-group row\">\r\n                            <label className=\"col-sm-4 col-lg-2 col-form-label\">Date*</label>\r\n                            <div className=\"col-sm-8 col-lg-4  mb-4 mb-lg-0\">\r\n                                <input type=\"date\" ref={this.dateRef} className=\"form-control\" required />\r\n                            </div>\r\n\r\n                            <label className=\"col-sm-4 col-lg-2 col-form-label\">Time*</label>\r\n                            <div className=\"col-sm-8 col-lg-4\">\r\n                                <input type=\"time\" ref={this.timeRef} className=\"form-control\" required />\r\n                            </div>\r\n                        </div><br />\r\n                        <div className=\"form-group row\">\r\n                            <label className=\"col-sm-5 col-lg-3 col-form-label\">\r\n                                Symptoms*</label>\r\n                            <div className=\"col-sm-7 col-lg-7\">\r\n                                <textarea className=\"form-control\" ref={this.symptomsRef} required></textarea>\r\n                            </div>\r\n                        </div>\r\n                        <br />\r\n                        <div className=\"form-group row justify-content-end\">\r\n                            <div className=\"col-sm-3\">\r\n                                <button type=\"submit\" className=\"btn btn-success w-100\">Add</button>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                    <small>* Required Field</small>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nAddNew.propTypes = {\r\n    crearCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddNew;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst BtnDelete = props => {\r\n    return (\r\n        <button onClick={() => { props.borrarCita(props.id) }} className=\"btn btn-danger\">\r\n            Delete &times;\r\n        </button>\r\n    )\r\n}\r\n\r\nBtnDelete.propTypes = {\r\n    borrarCita: PropTypes.func.isRequired,\r\n    id: PropTypes.string.isRequired\r\n}\r\n\r\nexport default BtnDelete;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Components\r\nimport BtnDelete from './BtnDelete';\r\n\r\nclass Appointment extends Component {\r\n    render() {\r\n        const { date, owner, pet, symptoms, time } = this.props.data\r\n        return (\r\n            <div className=\"media mt-3\">\r\n                <div className=\"media-body\">\r\n                    <h3 className=\"mt-0\">{pet}</h3>\r\n                    <p className=\"card-text\"><span>Owner:</span>{owner}</p>\r\n                    <p className=\"card-text\"><span>Date:</span>{date}</p>\r\n                    <p className=\"card-text\"><span>Time:</span>{time}</p>\r\n                    <p className=\"card-text\"><span>Symptoms: </span></p>\r\n                    <p className=\"card-text\">{symptoms}</p>\r\n\r\n                    < BtnDelete\r\n                        id={this.props.data.id}\r\n                        borrarCita={this.props.borrarCita}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nAppointment.proptType = {\r\n    data: PropTypes.shape({\r\n        pet: PropTypes.string.isRequired,\r\n        owner: PropTypes.string.isRequired,\r\n        date: PropTypes.string.isRequired,\r\n        time: PropTypes.string.isRequired,\r\n        symptoms: PropTypes.string.isRequired,\r\n        id: PropTypes.string.isRequired\r\n    }),\r\n    borrarCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Appointment;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Component\r\nimport Appointment from './Appointment';\r\n\r\n\r\nconst List = props => {\r\n    const citas = props.citas;\r\n    const message = Object.keys(citas).length === 0 ? 'No Appointments' : 'Manage your appointments here'\r\n\r\n    return (\r\n        <div className=\"card mt-5\">\r\n            <div className=\"card-body\">\r\n                <h2 className=\"card-title text-center\">\r\n                    {message}\r\n                </h2>\r\n                <div className=\"lista-citas\">\r\n                    {Object.keys(props.citas).map(cita => (\r\n                        <Appointment\r\n                            key={cita}\r\n                            data={props.citas[cita]}\r\n                            borrarCita={props.borrarCita}\r\n                        />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nList.propTypes = {\r\n    citas: PropTypes.array.isRequired,\r\n    borrarCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default List;","import React, { Component } from 'react';\r\n\r\n// Components\r\nimport Header from './Components/Header';\r\nimport AddNew from './Components/AddNew';\r\nimport List from './Components/List';\r\n\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    citas: []\r\n  }\r\n\r\n  componentDidMount() {\r\n    const citasLS = localStorage.getItem('citas');  //Tomamos lo que hay en el Local Storage\r\n    if (citasLS) {\r\n      this.setState({\r\n        citas: JSON.parse(citasLS)\r\n      })\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    localStorage.setItem(     // Guardamos el state en el Local Storage\r\n      'citas',\r\n      JSON.stringify(this.state.citas)\r\n    )\r\n  }\r\n\r\n\r\n  crearCita = (nuevaCita) => {\r\n    const citas = [\r\n      ...this.state.citas,\r\n      nuevaCita\r\n    ];\r\n    this.setState({\r\n      citas: citas\r\n    })\r\n  }\r\n\r\n  borrarCita = id => {\r\n    const citasActuales = [...this.state.citas];\r\n\r\n    const citas = citasActuales.filter(cita => cita.id !== id);\r\n\r\n    this.setState({\r\n      citas: citas\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <Header\r\n          title={'Manage your appointments'}\r\n        />\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <AddNew\r\n              crearCita={this.crearCita}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <List\r\n              citas={this.state.citas}\r\n              borrarCita={this.borrarCita}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}